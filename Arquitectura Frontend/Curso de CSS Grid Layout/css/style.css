body {
  margin: 0;
  padding: 0;
  font-family: Arial, Helvetica, sans-serif;
}
.container {
  display: grid;
  /* grid-template-columns: 25% 200px 25%;
  grid-template-rows: 300px 300px; */
  /* grid-template: filas / columnas; */
  /* que tamaño va a tener el numero de columnas que uno quiera */
  /* grid-column-gap: 30px;
  grid-row-gap: 30px; */
  grid-template: 300px 150px 100px / repeat(4, minmax(200px, 1fr));
  grid-gap: 40px 15px;
}

.item {
  background-color: lightblue;
  padding: 10px;
  border: solid red;
  /* margin-right: 10px;
  margin-bottom: 10px; */
}
.item:nth-of-type(4) {
  background: blue;
  overflow: auto;
  /* display: subgrid; */
  /* display: inline-grid; */
  display: grid;
  grid-template: 25% 25% 25% / 25% 25% 25%;
}

.item .item {
  background: yellow;
}
/* (nth.of-type) toma el elemento de tipo item que nosotros querramos  */
/* ___
___
Hasta acá son columnasa ahora vamos con filas
___
___ */

/* en la clase #5 vimos lo que es el explicit grid: esto es decirle al navegador en cuantos filas y columnas vamos a dividir nuestro contenido (esto no es una tabla dinamica simplemente decimos el tamaño y es todo) */
/* La clase #5 hablamos de los distintos tipos de displays que vienen incluidos con grid  */

/* (grid-column-gap) funciona para decierle al navegador que queremos un espciado en las columnas en lugar de usar margin  */

/* grid integra una nueva unidad llamada fracciones esto quiere decir que se va a organizar en fracciones equivalentes, tambien se introcuden las funciones en css y los agregamos dentro de la funcion de template*/
